version: 2.1
orbs:
  orb-tools: circleci/orb-tools@12.0
  aws-cli: {}
filters: &filters
  tags:
    only: /.*/
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
jobs:
  integration-test-install:
    parameters:
      executor:
        type: executor
      version:
        description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
        default: latest
        type: string
      configure_default_region:
        type: boolean
        default: true
      configure_profile_region:
        type: boolean
        default: true
      override_installed:
        type: boolean
        default: false
      binary_dir:
        type: string
        default: "/usr/local/bin"
        description: |
          Specify the binary directory
      install_dir:
        type: string
        default: "/usr/local/aws-cli"
        description: |
          Specify the installation directory
      role_arn:
        type: string
        default: ""
      role_session_name:
        description: An identifier for the assumed role session
        type: string
        default: ${CIRCLE_JOB}
      session_duration:
        description: The duration of the session in seconds
        type: string
        default: '3600'
      profile_name:
        description: Profile name to be configured.
        type: string
        default: "default"
      region:
        type: string
        default: ${AWS_DEFAULT_REGION}
    executor: <<parameters.executor>>
    steps:
      - aws-cli/setup:
          version: <<parameters.version>>
          override_installed: <<parameters.override_installed>>
          install_dir: <<parameters.install_dir>>
          binary_dir: <<parameters.binary_dir>>
          role_arn: <<parameters.role_arn>>
          profile_name: <<parameters.profile_name>>
          session_duration: <<parameters.session_duration>>
          role_session_name: <<parameters.role_session_name>>
          configure_default_region: <<parameters.configure_default_region>>
          configure_profile_region: <<parameters.configure_profile_region>>
          region: <<parameters.region>>
      - test_paging
  integration-test-role-arn-setup:
    executor: docker-base
    parameters:
      profile_name:
        description: Name of new profile associated with role arn.
        type: string
      role_arn:
        description: Role ARN that the profile should take.
        type: string
      source_profile:
        description: Source profile containing credentials to assume the role with role_arn.
        type: string
        default: "default"
    steps:
      - aws-cli/setup
      - aws-cli/role_arn_setup:
          profile_name: <<parameters.profile_name>>
          role_arn: <<parameters.role_arn>>
      - run:
          name: Check if profiles were created
          command: |-
            which aws
            ROLE_ARN=$(aws configure get role_arn --profile <<parameters.profile_name>>)
            SOURCE_PROFILE=$(aws configure get source_profile --profile <<parameters.profile_name>>)
            if [ "${ROLE_ARN}" == "<<parameters.role_arn>>" ] && [ "${SOURCE_PROFILE}" == "<<parameters.source_profile>>" ]; then
              echo configuration is correctly set.
            else
              echo Wrong configuration set.
              exit 1
            fi
workflows:
  test-deploy:
    jobs:
      # Testing region configuration
      - integration-test-install:
          name: integration-test-configure-profile-region
          role_arn: arn:aws:iam::122211685980:role/CPE_ECR_OIDC_TEST
          profile_name: "OIDC-User"
          context: [CPE-OIDC]
          configure_default_region: false
          region: us-west-2
          executor: docker-base
          post-steps:
            - run:
                name: Checking ~/.aws/config for profile region
                command: |
                  if grep "\[profile OIDC-User\]" ~/.aws/config && grep "us-west-2" ~/.aws/config;then 
                    echo "Profile region properly configured"
                    exit 0
                  else
                    echo "Profile region not properly configured"
                    exit 1
                  fi
      - integration-test-install:
          name: integration-test-configure-default-region
          role_arn: arn:aws:iam::122211685980:role/CPE_ECR_OIDC_TEST
          profile_name: "OIDC-User"
          context: [CPE-OIDC]
          configure_profile_region: false
          region: us-west-1
          executor: docker-base
          post-steps:
            - run:
                name: Checking ~/.aws/config for default region
                command: |
                  if grep "\[default\]" ~/.aws/config && grep "us-west-1" ~/.aws/config;then 
                    echo "Default region properly configured"
                    exit 0
                  else
                    echo "Default region not properly configured"
                    exit 1
                  fi
      # Testing OIDC
      - integration-test-install:
          name: integration test web identity command with white spaces
          role_arn: arn:aws:iam::122211685980:role/CPE_ECR_OIDC_TEST
          context: [CPE-OIDC]
          executor: docker-base
          post-steps:
            - run:
                name: Web Identity Test - Logging into ECR
                command: aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 122211685980.dkr.ecr.us-west-2.amazonaws.com
      - integration-test-install:
          name: integration-test-web-identity-with-profile
          role_arn: arn:aws:iam::122211685980:role/CPE_ECR_OIDC_TEST
          profile_name: "OIDC-Tester"
          context: [CPE-OIDC]
          executor: docker-base
          post-steps:
            - run:
                name: Web Identity Test - Logging into ECR
                command: aws ecr get-login-password --region us-west-2 --profile "OIDC-Tester" | docker login --username AWS --password-stdin 122211685980.dkr.ecr.us-west-2.amazonaws.com
      # Testing executors that do not AWS CLI pre-installed
      - integration-test-install:
          name: integration-test-install-<<matrix.executor>>
          context: [CPE_ORBS_AWS]
          matrix:
            alias: test-install
            parameters:
              executor: ["docker-base", "macos", "alpine", "docker-nounset-shell", terraform ]
          filters: *filters
          post-steps:
            - check_aws_version
      # Test installing specific versions on executors without AWS pre-installed
      - integration-test-install:
          name: integration-test-install-version-<<matrix.executor>>
          context: [CPE_ORBS_AWS]
          matrix:
            alias: test-install-version
            parameters:
              executor: ["docker-base", "macos", "alpine", "docker-nounset-shell" ]
          version: "2.1.10"
          filters: *filters
          post-steps:
            - check_aws_version:
                version: "2.1.10"
      # Test overriding existing version of AWS pre-installed
      - integration-test-install:
          name: integration-test-install-override-version-<<matrix.executor>>
          context: [CPE_ORBS_AWS]
          matrix:
            alias: test-install-override-version
            parameters:
              executor: ["linuxvm", "windows", "arm"]
          version: "2.1.10"
          install_dir: "/usr/local/aws-cli"
          binary_dir: ""
          override_installed: false
          filters: *filters
          post-steps:
            - check_aws_version:
                version: "2.1.10"
      - integration-test-role-arn-setup:
          name: integration-test-role-arn-config
          profile_name: "CircleCI-Tester"
          role_arn: ${ROLE_ARN}
          context: [CPE_ORBS_AWS]
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/aws-cli
          vcs_type: << pipeline.project.type >>
          pub_type: production
          enable_pr_comment: true
          context: orb-publisher
          requires: [orb-tools/pack, test-install, test-install-version, test-install-override-version, integration-test-web-identity-with-profile, integration test web identity command with white spaces,integration-test-role-arn-config]
          filters: *release-filters
executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.3.4
  alpine:
    docker:
      - image: alpine:latest
  docker-base:
    docker:
      - image: cimg/base:stable
  docker-nounset-shell:
    shell: /bin/bash -o nounset
    docker:
      - image: cimg/base:stable
  macos:
    macos:
      xcode: 14.2.0
  arm:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
  linuxvm:
    machine:
      image: ubuntu-2004:202101-01
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
    shell: bash.exe
    resource_class: windows.medium
commands:
  check_aws_version:
    parameters:
      version:
        type: string
        default: ""
    steps:
      - run:
          name: check_aws_version
          command: |
            aws --version
            if [ -n "<<parameters.version>>" ]; then
              INSTALLED_AWS_VERSION="$(aws --version)"
              aws --version | grep <<parameters.version>>
            else
              if ! command -v aws &> /dev/null; then exit 1; else exit 0; fi
            fi
  test_paging:
    steps:
      - run:
          name: Test that paging is disabled
          command: |-
            # Test with aws command that would require paging if a pager is enabled
            if cat /etc/issue | grep "Alpine" || uname -a | grep "x86_64 Msys"; then
              source $BASH_ENV
            fi
            aws --version
            aws ec2 describe-images \
              --owners amazon \
              --filters "Name=platform,Values=windows" "Name=root-device-type,Values=ebs"
